
using System.Collections.Generic;
using System.Threading.Tasks;
using App1.Data;
using Microsoft.EntityFrameworkCore;






namespace App1.Repositories
{

    public interface IIncomeRepository
    {
        Task<IEnumerable<Income>> GetAll();
        Task<Income> GetById(int id);
        Task AddIncome(Income income);
        Task UpdateIncome(Income income);
        Task DeleteIncome(int id);
    }
    public class IncomeRepository : IIncomeRepository
    {

        private readonly App1Context _context;

        public IncomeRepository(App1Context context)
        {
            _context = context;
        }

        public async Task<IEnumerable<Income>> GetAll()
        {
            return await _context.Income.ToListAsync();
        }

        public async Task<Income> GetById(int id)
        {
            return await _context.Income.FindAsync(id);
        }

        public async Task AddIncome(Income income)
        {
            _context.Income.Add(income);
            await _context.SaveChangesAsync();
        }

        public async Task UpdateIncome(Income income)
        {
            _context.Entry(income).State = EntityState.Modified;
            await _context.SaveChangesAsync();
        }

        public async Task DeleteIncome(int id)
        {
            var income = await _context.Income.FindAsync(id);

            if (income != null) {

                _context.Income.Remove(income);
            await _context.SaveChangesAsync();
            }
        }


    }
}



TODO REPOSITORY

public class TodoRepository : ITodoRepository
{
    private readonly ApplicationDbContext _dbContext;

    public TodoRepository(ApplicationDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    public async Task<IEnumerable<TodoItem>> GetTodoItems()
    {
        return await _dbContext.TodoItems.ToListAsync();
    }

    public async Task<TodoItem> GetTodoItemById(int id)
    {
        return await _dbContext.TodoItems.FindAsync(id);
    }

    public async Task<int> AddTodoItem(TodoItem todoItem)
    {
        _dbContext.TodoItems.Add(todoItem);
        await _dbContext.SaveChangesAsync();
        return todoItem.Id;
    }

    public async Task UpdateTodoItem(TodoItem todoItem)
    {
        _dbContext.Entry(todoItem).State = EntityState.Modified;
        await _dbContext.SaveChangesAsync();
    }

    public async Task DeleteTodoItem(int id)
    {
        var todoItem = await _dbContext.TodoItems.FindAsync(id);
        if (todoItem != null)
        {
            _dbContext.TodoItems.Remove(todoItem);
            await _dbContext.SaveChangesAsync();
        }
    }
}

